pipeline {
  agent any

parameters {
        choice(choices: ['dev'], description: 'Name of the environment', name: 'ENV')
         
         }

  stages {

    stage('SCM Checkout') {
      steps {
        git branch: 'master',
        credentialsId: 'tfadghb',
        url: 'https://github.com/adghb/ldr-frontend.git'

      }
    }
    stage('Install Packages') {
      steps {
          echo 'Install npm package'
//        sh 'npm install'
      }
    }
     stage('Run Tests') {
      steps {
           echo 'Run test'
//         sh 'npm run test'
       }
     }
     stage('Create Build Artifacts') {
      steps {
           echo 'Run build'
//         sh 'npm run build'
          }
        }

      stage('Push') {
    node {
      withCredentials([[
        $class: 'AmazonWebServicesCredentialsBinding',
        credentialsId: credentialsId,
        accessKeyVariable: 'AWS_ACCESS_KEY_ID',
        secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
      ]]) {
        ansiColor('xterm') {
          sh "set +e; cd s3 && terraform init;"
//          sh "${tfHome}/terraform init"
        }
      }
    }

/*    node {
      withCredentials([[
        $class: 'AmazonWebServicesCredentialsBinding',
        credentialsId: credentialsId,
        accessKeyVariable: 'AWS_ACCESS_KEY_ID',
        secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
      ]]) {
        ansiColor('xterm') {
        sh 'cd s3 && terraform plan -out=tfplan1 -input=false'
        sh 'cd s3 && terraform plan -input=false'
        sh "${tfHome}/terraform init"
        }
      }
    }
*/
    node {
      withCredentials([[
        $class: 'AmazonWebServicesCredentialsBinding',
        credentialsId: credentialsId,
        accessKeyVariable: 'AWS_ACCESS_KEY_ID',
        secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
      ]]) {
        ansiColor('xterm') {
//          sh "set +e; cd s3 && terraform apply -auto-approve -input=false "tfplan1";"
          sh "set +e; cd s3 && terraform apply -auto-approve -input=false;"
//          sh "${tfHome}/terraform init"
        }
      }
    }
  }

   stage('Push Package to S3') {
    node {
      
     sh "aws s3 cp example.zip s3://tf-sls-example/dev/v1.0.0/example.zip"
    }
  }
    

    stage('Deployment') {

      steps {
            withAWS(region:'ap-south-1',credentials:'awsCredentials') {
            s3Delete(bucket: 'adweb', path:'**/*')
            s3Upload(bucket: 'adweb', workingDir:'build', includePathPattern:'**/*');
            }
//            mail(subject: 'dev Build', body: 'New Deployment to dev', to: 'jenkins-mailing-list@leadr.com')
          }
        }
     
      }
    }

